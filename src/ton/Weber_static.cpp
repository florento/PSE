//
//  Weber_static.cpp
//  pse
//
//  Created by Florent Jacquemard on 04/03/2024.
//

#include "Weber_static.hpp"

namespace pse {


// static const size_t Weber_static::NB_TONS = 30;

// static 
const int Weber_static::UNDEF_DIST = -1;


// static
int Weber_static::dist(const Ton& ton1, const Ton& ton2)
{
    size_t i1 = index(ton1);
    assert(i1 < NB_TONS);
    size_t i2 = index(ton2);
    assert(i2 < NB_TONS);
    return WEBER_DIST[i1][i2];
}

// static
/// @todo TBC for MinorNat (Aeolian) and MinorMel
size_t Weber_static::index(const Ton& ton)
{
    if (ton.getMode() == ModeName::Major)
    {
        return ton.fifths() + 7;
    }
    else if (ton.getMode() == ModeName::Minor    ||
             ton.getMode() == ModeName::MinorNat ||
             ton.getMode() == ModeName::MinorMel)
    {
        return ton.fifths() + 22;
    }
    else
    {
        ERROR("Weber index undefined for {}", ton);
        return NB_TONS;
    }
}


// static
bool Weber_static::inf(int a, int b)
{
    assert(a == UNDEF_DIST || a >= 0);
    assert(b == UNDEF_DIST || b >= 0);
    if (a == UNDEF_DIST)
    {
        return false;
    }
    else if (b == UNDEF_DIST)
    {
        return true;
    }
    else
    {
        return a < b;
    }
};


// static
const std::vector<std::vector<int>> Weber_static::WEBER_DIST =
{{
//     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29
//    -7  -6  -5  -4  -3  -2  -1   0   1   2   3   4   5   6   7  -7  -6  -5  -4  -3  -2  -1   0   1   2   3   4   5   6   7
//    Cb  Gb  Db  Ab  Eb  Bb   F   C   G   D   A   E   B  F#  C#  ab  eb  bb   f   c   g   d   a   e   b  f#  c#  g#  d#  a#
    {  0,  1,  2,  2,  3,  4,  4,  5,  6,  6,  7,  8,  8,  9, 10,  1,  2,  3,  3,  4,  5,  5,  6,  7,  7,  8,  9,  9, 10, 11 }, // Cb -7
    {  1,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6,  7,  8,  8,  9,  2,  1,  2,  3,  3,  4,  5,  5,  6,  7,  7,  8,  9,  9, 10 }, // Gb -6
    {  2,  1,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6,  7,  8,  8,  2,  2,  1,  2,  3,  3,  4,  5,  5,  6,  7,  7,  8,  9,  9 }, // Db -5
    {  2,  2,  1,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6,  7,  8,  1,  2,  2,  1,  2,  3,  3,  4,  5,  5,  6,  7,  7,  8,  9 }, // Ab -4
    {  3,  2,  2,  1,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6,  7,  2,  1,  2,  2,  1,  2,  3,  3,  4,  5,  5,  6,  7,  7,  8 }, // Eb -3
    {  4,  3,  2,  2,  1,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6,  3,  2,  1,  2,  2,  1,  2,  3,  3,  4,  5,  5,  6,  7,  7 }, // Bb -2
    {  4,  4,  3,  2,  2,  1,  0,  1,  2,  2,  3,  4,  4,  5,  6,  3,  3,  2,  1,  2,  2,  1,  2,  3,  3,  4,  5,  5,  6,  7 }, // F  -1
    {  5,  4,  4,  3,  2,  2,  1,  0,  1,  2,  2,  3,  4,  4,  5,  4,  3,  3,  2,  1,  2,  2,  1,  2,  3,  3,  4,  5,  5,  6 }, // C   0
    {  6,  5,  4,  4,  3,  2,  2,  1,  0,  1,  2,  2,  3,  4,  4,  5,  4,  3,  3,  2,  1,  2,  2,  1,  2,  3,  3,  4,  5,  5 }, // G   1
    {  6,  6,  5,  4,  4,  3,  2,  2,  1,  0,  1,  2,  2,  3,  4,  5,  5,  4,  3,  3,  2,  1,  2,  2,  1,  2,  3,  3,  4,  5 }, // D   2
    {  7,  6,  6,  5,  4,  4,  3,  2,  2,  1,  0,  1,  2,  2,  3,  6,  5,  5,  4,  3,  3,  2,  1,  2,  2,  1,  2,  3,  3,  4 }, // A   3
    {  8,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1,  0,  1,  2,  2,  7,  6,  5,  5,  4,  3,  3,  2,  1,  2,  2,  1,  2,  3,  3 }, // E   4
    {  8,  8,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1,  0,  1,  2,  7,  7,  6,  5,  5,  4,  3,  3,  2,  1,  2,  2,  1,  2,  3 }, // B   5
    {  9,  8,  8,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1,  0,  1,  8,  7,  7,  6,  5,  5,  4,  3,  3,  2,  1,  2,  2,  1,  2 }, // F#  6
    { 10,  9,  8,  8,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1,  0,  9,  8,  7,  7,  6,  5,  5,  4,  3,  3,  2,  1,  2,  2,  1 }, // C#  7
    {  1,  2,  2,  1,  2,  3,  3,  4,  5,  5,  6,  7,  7,  8,  9,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6,  7,  8,  8,  9, 10 }, // ab -7
    {  2,  1,  2,  2,  1,  2,  3,  3,  4,  5,  5,  6,  7,  7,  8,  1,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6,  7,  8,  8,  9 }, // eb -6
    {  3,  2,  1,  2,  2,  1,  2,  3,  3,  4,  5,  5,  6,  7,  7,  2,  1,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6,  7,  8,  8 }, // bb -5
    {  3,  3,  2,  1,  2,  2,  1,  2,  3,  3,  4,  5,  5,  6,  7,  2,  2,  1,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6,  7,  8 }, // f  -4
    {  4,  3,  3,  2,  1,  2,  2,  1,  2,  3,  3,  4,  5,  5,  6,  3,  2,  2,  1,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6,  7 }, // c  -3
    {  5,  4,  3,  3,  2,  1,  2,  2,  1,  2,  3,  3,  4,  5,  5,  4,  3,  2,  2,  1,  0,  1,  2,  2,  3,  4,  4,  5,  6,  6 }, // g  -2
    {  5,  5,  4,  3,  3,  2,  1,  2,  2,  1,  2,  3,  3,  4,  5,  4,  4,  3,  2,  2,  1,  0,  1,  2,  2,  3,  4,  4,  5,  6 }, // d  -1
    {  6,  5,  5,  4,  3,  3,  2,  1,  2,  2,  1,  2,  3,  3,  4,  5,  4,  4,  3,  2,  2,  1,  0,  1,  2,  2,  3,  4,  4,  5 }, // a   0
    {  7,  6,  5,  5,  4,  3,  3,  2,  1,  2,  2,  1,  2,  3,  3,  6,  5,  4,  4,  3,  2,  2,  1,  0,  1,  2,  2,  3,  4,  4 }, // e   1
    {  7,  7,  6,  5,  5,  4,  3,  3,  2,  1,  2,  2,  1,  2,  3,  6,  6,  5,  4,  4,  3,  2,  2,  1,  0,  1,  2,  2,  3,  4 }, // b   2
    {  8,  7,  7,  6,  5,  5,  4,  3,  3,  2,  1,  2,  2,  1,  2,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1,  0,  1,  2,  2,  3 }, // f#  3
    {  9,  8,  7,  7,  6,  5,  5,  4,  3,  3,  2,  1,  2,  2,  1,  8,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1,  0,  1,  2,  2 }, // c#  4
    {  9,  9,  8,  7,  7,  6,  5,  5,  4,  3,  3,  2,  1,  2,  2,  8,  8,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1,  0,  1,  2 }, // g#  5
    { 10,  9,  9,  8,  7,  7,  6,  5,  5,  4,  3,  3,  2,  1,  2,  9,  8,  8,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1,  0,  1 }, // d#  6
    { 11, 10,  9,  9,  8,  7,  7,  6,  5,  5,  4,  3,  3,  2,  1, 10,  9,  8,  8,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1,  0 }  // a#  7
}};


} // end namespace pse

